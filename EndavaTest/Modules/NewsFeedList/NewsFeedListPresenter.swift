//
//  NewsFeedListPresenter.swift
//  EndavaTest
//
//  Created by Danijel Kecman on 8/3/17.
//  Copyright (c) 2017 Danijel Kecman. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class NewsFeedListPresenter {

    // MARK: - Private properties -

    fileprivate weak var _view: NewsFeedListViewInterface?
    fileprivate var _interactor: NewsFeedListInteractorInterface
    fileprivate var _wireframe: NewsFeedListWireframeInterface
    
    fileprivate var _source: String
    
    fileprivate var _articles = [Article]()
    fileprivate var _newsFeedItems = [NewsFeedItem]()

    // MARK: - Lifecycle -

    init(wireframe: NewsFeedListWireframeInterface,
         view: NewsFeedListViewInterface,
         interactor: NewsFeedListInteractorInterface, source: String) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
        
        _source = source
    }
    
    func viewDidLoad() {
        getFeedList()
    }
    
    // MARK: - Actions -
    
    func refreshFeed() {
        getFeedList()
    }
}

// MARK: - Extensions -

extension NewsFeedListPresenter: NewsFeedListPresenterInterface {
    // Data Source & Delegate
    
    func numberOfNewsSections() -> Int {
        return 1
    }
    
    func numberOfNews(in section: Int) -> Int {
        return _newsFeedItems.count
    }
    
    func newsFeedItem(at indexPath: IndexPath) -> NewsFeedItem {
        return _newsFeedItems[indexPath.row]
    }
    
    func didSelectNewsItem(at indexPath: IndexPath) {
        _wireframe.navigate(to: .articleDetails(article: _articles[indexPath.row]))
    }
    
    // Interactor 
    
    func getFeedList() {
        _view?.showLoading()
        _interactor.getNewsFeedListFrom(source: _source) { [unowned self] articles in
            self._articles = articles
            articles.forEach { article in
                let item = NewsFeedItem(author: article.author,
                                        title: article.title,
                                        description: article.description,
                                        imageUrl: article.imageUrl,
                                        publishedAt: article.publishedAt)
                self._newsFeedItems.append(item)
            }
            self._view?.reloadTable()
            self._view?.hideLoading()
        }
    }
}
















