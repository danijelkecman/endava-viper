//
//  NewsSourcesPresenter.swift
//  EndavaTest
//
//  Created by Danijel Kecman on 8/4/17.
//  Copyright (c) 2017 Danijel Kecman. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class NewsSourcesPresenter {

    // MARK: - Private properties -

    fileprivate weak var _view: NewsSourcesViewInterface?
    fileprivate var _interactor: NewsSourcesInteractorInterface
    fileprivate var _wireframe: NewsSourcesWireframeInterface
    
    fileprivate var _sourcesItems = [SourceItem]()

    // MARK: - Lifecycle -

    init(wireframe: NewsSourcesWireframeInterface, view: NewsSourcesViewInterface, interactor: NewsSourcesInteractorInterface) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
    }
    
    func viewDidLoad() {
        getSources()
    }
}

// MARK: - Extensions -

extension NewsSourcesPresenter: NewsSourcesPresenterInterface {
    // Interactor
    
    func getSources() {
        _interactor.getSourcesList { [unowned self] sources in
            sources.forEach { source in
                let item = SourceItem(id: source.id, name: source.name, description: source.description)
                self._sourcesItems.append(item)
            }
            self.refreshSources()
        }
    }
    
    // Data Source and Delegate
    
    func numberOfSourcesSections() -> Int {
        return 1
    }
    
    func numberOfSources(in section: Int) -> Int {
        return _sourcesItems.count
    }
    
    func sourceItem(at indexPath: IndexPath) -> SourceItem {
        return _sourcesItems[indexPath.row]
    }
    
    func didSelectSourceItem(at indexPath: IndexPath) {
        _wireframe.navigate(to: .newsFeed(source: _sourcesItems[indexPath.row].id))
    }
    // Actions
    func refreshSources() {
        _view?.reloadTable()
    }
}
